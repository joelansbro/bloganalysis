title,author,project,date_published,lead_image_url,content,next_page_url,url,domain,excerpt,word_count,direction,total_pages,rendered_pages
Application Performance Monitoring AWS Lambda Functions with Sentry,Matt Makai,Masters,2019-05-21T16:21:43.081Z,https://www.fullstackpython.com/img/headers/python-lambda-sentry.jpg,"
Amazon Web Services (AWS) Lambda is a usage-based
computing infrastructure service that can execute
Python 3 code. One of the challenges of this
environment is ensuring efficient performance of your Lambda Functions.
Application performance monitoring (APM) is particularly useful in these
situations because you are billed based on how long you use the
resources.
In this post we will install and configure
Sentry's APM that works via a
Lambda layer.
Note that if you are looking for error monitoring rather than performance
monitoring, take a look at
How to Monitor Python Functions on AWS Lambda with Sentry
rather than following this post.
First steps with AWS Lambda
A local development environment is not
required to follow this tutorial because all of the coding and configuration
can happen in a web browser through the
AWS Console.
Sign into your existing AWS account
or sign up for a new account. Lambda
gives you the first 1 million requests for free so that you can execute
basic applications without no or low cost.

When you log into your account, use the search box to enter
""lambda"" and select ""Lambda"" when it appears to get to the right
page.

If you have already used Lambda before, you will see your existing Lambda
functions in a searchable table. We're going to create a new function so
click the ""Create function"" button.

The create function page will give you several options for building a
Lambda function.

Click the ""Browse Serverless App Repository"" selection box, then choose
the ""hello-world-python3"" starter app from within the
""Public applications"" section.

The hello-world-python3 starter app details page should look something
like the following screen:

Fill in some example text such as ""test"" under IdentityNameParameter
and click the ""Deploy"" button:

The function will now be deployed. As soon as it is ready we can
customize it and test it out before adding Sentry to capture any errors
that occur during execution.
Go back to the Lambda functions main page and select your new deployed
starter app from the list.

Find the orange ""Test"" button with a down arrow next to it like you
see in the image below, and then click the down arrow. Select
""Configure Test Event"".

Fill in the Event name as ""FirstTest"" or something similar, then
press the ""Create"" button at the bottom of the modal window.
Click the ""Test"" button and it will run the Lambda function with
the parameters from that new test event. You should see something
like the following output:
Response
""value1"" Function Logs
START RequestId: 62fa2f25-669c-47b7-b4e7-47353b0bd914 Version: $LATEST
value1 = value1
value2 = value2
value3 = value3
END RequestId: 62fa2f25-669c-47b7-b4e7-47353b0bd914
REPORT RequestId: 62fa2f25-669c-47b7-b4e7-47353b0bd914 Duration: 0.30 ms Billed Duration: 1 ms Memory Size: 128 MB Max Memory Used: 43 MB Init Duration: 1.34 ms

Request ID
62fa2f25-669c-47b7-b4e7-47353b0bd914

The code was successfully executed, so let's add Sentry's performance
monitoring and test some code that uses it.
Performance monitoring with Sentry
Go to Sentry.io's homepage.

Sign into your account or sign up for a new free account. You will be at
the main account dashboard after logging in or completing the Sentry sign
up process.
Select ""Performance"" on the left navigation bar, it will take you to the
performance monitoring page.

Click ""Start Setup"" then go back over to AWS Lambda to complete the
steps for adding Sentry's Python layer to your Lambda function.
The easiest way to add Sentry to Lambda for this application
is to configure an
AWS Lambda Layer
with the necessary dependency for Sentry. Sentry has concise
documentation on adding via Lambda Layers
so we will walk through that way to configure it and test it
out.
Scroll down to the ""Layers"" section while in your Lambda
function configuration. Click the ""Add a layer"" button"":

In the ""Add layer"" screen, select the ""Specify an ARN"" option.

Now to specify the Amazon Resource Name (ARN), we need to use
the Sentry documentation to get the right configuration string.
US-East-1 is the oldest and most commonly-used region so I'll
use that here in this tutorial but you should check which one
you are in if you are not certain.

Copy that value into the Lambda Layer configuration, like this:

Then press the ""Add"" button. You now have the Sentry dependency
in your environment so code that relies upon that library can be
used in the Lambda function.
Testing performance monitoring
Let's change our Python code in the Lambda function and test out
the APM agent.
Make sure you are signed into your Sentry account and go to
this specific AWS Lambda set up guide.
You will see a ""DSN string"" that we need to set as an environment
variable on AWS Lambda to finish our setup. Copy the string that
matches your project as shown on that page in the highlighted green
section:

We will
use environment variables on AWS Lambda
to store and access values like this Sentry DSN key.
Go into the Lambda console to create a new environment variable. To do
that, click the ""Configuration"" tab within Lambda like you see here:

Then click ""Edit"" and add a new environment variable with the key of SENTRY_DSN
and the value of the DSN string that you copied from the Sentry screen. 

Click the ""Save"" button and go back to your Lambda function's code editor.
Replace the code in your Lambda function with the following code:
import json
import os
import sentry_sdk
import time
from sentry_sdk.integrations.aws_lambda import AwsLambdaIntegration
from sentry_sdk import start_transaction SENTRY_DSN = os.environ.get('SENTRY_DSN')
sentry_sdk.init( dsn=SENTRY_DSN, traces_sample_rate=1.0,
    integrations=[AwsLambdaIntegration()]
)

print('Loading function')


def lambda_handler(event, context):
    calc = 1000

    # this is custom instrumentation, see docs: https://bit.ly/2WjT3AY
    with start_transaction(op=""task"", name=""big calculation""):
        for i in range(1, 1000):
            calc = calc * i

    print(calc)
    return event['key1']  # Echo back the first key value

The above code imports the Sentry dependencies, and then runs both
automatic instrumentation
and custom instrumentation on the
code. Click the ""Deploy"" button and then ""Test"". The code will
successfully execute and when we go back to our Sentry performance
monitoring dashboard we will see some initial results, like this
following screenshot.

Looks good, you have both the default and the specified transaction
performance recordings in the dashboard, and you can toggle between
them (or other transactions you record) through the user interface.
What's Next?
We just wrote and executed a Python 3 function on AWS Lambda that
used the basics of Sentry APM to get some initial performance
monitoring data.
Check out the AWS Lambda section for
more tutorials by other developers.
Further questions? Contact me on Twitter
@fullstackpython
or @mattmakai. I am also on GitHub with
the username mattmakai.
Something wrong with this post? Fork
this page's source on GitHub
and submit a pull request.
",,https://www.fullstackpython.com/blog/application-performance-monitoring-aws-lambda-functions-sentry.html,fullstackpython,Learn how to use Sentry Application Performance Monitoring on AWS Lambda. Great post on fullstackpython.com!,1113,ltr,1,1
Asynchronous Web Scraping With Python AIOHTTP,Ronnie Atuhaire,Masters,2019-05-21T16:21:43.081Z,https://hashnode.com/utility/r?url=https%3A%2F%2Fcdn.hashnode.com%2Fres%2Fhashnode%2Fimage%2Fupload%2Fv1648740784197%2FacHwqvSOX.png%3Fw%3D1200%26h%3D630%26fit%3Dcrop%26crop%3Dentropy%26auto%3Dcompress%2Cformat%26format%3Dwebp%26fm%3Dpng,"Hey there ðŸ‘‹, welcome here! Having looked at Asynchronous Web Scraping With Python GRequests, today we are using a different approach as I promised; We are using aiohttp
Open that article in a new tab because I will be referencing to it.
So we shall be using two major modules and one comes with the standard python library. It is a library for building web-client and web-server using Python and asyncio. It is a Python 3â€™s built-in library. This means itâ€™s already installed if you have Python 3. Since Python 3.5, it is convenient to work with asynchronous code.
asyncio stands for Asynchronous Input-Output. This is a very powerful concept to use whenever you work IO. Interacting with the web or external APIs such as Telegram makes a lot of sense this way.
Let's not waste time and import the necessary modules
import aiohttp
import asyncio
from timeit import default_timer
You may want to pip install aiohttp before you continue if you don't have it.
We define the same and exact URLs we used in our synchronous file in this article;
urls = ['https: 'https: 'https: 'https: 'https: 'https:
Now create a normal function that has async pre-appended to it lie this; async def main(): and add the following code underneath which I will explain later on;
This function will help us fetch the HTTP Status responses and we shall later define a main() one that will await the results from this function and aid us in creating and running the event loop.
async def fetch_status(): start_time = default_timer() async with ClientSession() as session: for url in urls: async with session.get(url) as response: print(f""[+] Getting Link [+] {url} === {response.status} "") time_elapsed = default_timer() - start_time print(""It took --- {} seconds --- for all the links""
      .format(time_elapsed))
In order to have an asynchronous function, we use the async keyword. 
default_timer() : This will return the default time when executed.
We open a client session with a with keyword that automatically handles the opening & closure of the session for us and then we loop through the URLs to get the response status.
We later calculate the time that has elapsed in doing so.
Now let's create the main() function since it is required and very essential and it will basically call fetch_status().
async def main(): await fetch_status()
Now if everything is good, we create the event loop and run our file;
loop = asyncio.get_event_loop()
loop.run_until_complete(main())
To run an async function (coroutine) you have to call it using an Event Loop. Event Loops: You can think of Event Loops as functions to run asynchronous tasks and callbacks, perform network IO operations, and run subprocesses.
Running the above script produces;

At the time of writing, I am using Python 3.10 and yours could be perfect (between 3.5-3-8) and you may not see those depreciation warnings above.
But if you don't want to see them when you run your file, you can add this on top;
import warnings
warnings.filterwarnings(""ignore"")
So our entire file is;
import aiohttp
import asyncio
from timeit import default_timer
from aiohttp import ClientSession
import warnings
warnings.filterwarnings(""ignore"") urls = ['https://nytimes.com', 'https://github.com', 'https://google.com', 'https://reddit.com', 'https://hashnode.com', 'https://producthunt.com'] async def fetch_status(): start_time = default_timer() async with ClientSession() as session: for url in urls: async with session.get(url) as response: print(f""[+] Getting Link [+] {url} === {response.status} "") time_elapsed = default_timer() - start_time print(""It took --- {} seconds --- for all the links"" .format(time_elapsed)) async def main(): await fetch_status()

loop = asyncio.get_event_loop()
loop.run_until_complete(main())

That's it! Find the GitHub repo here.
ðŸ“Œ Read my first article here.
ðŸ“Œ asyncio official docs
ðŸ“Œ aiohttp official docs Once again, hope you learned something today from my little closet.
Please consider subscribing or following me for related content, especially about Tech, Python & General Programming.
You can show extra love by buying me a coffee to support this free content and I am also open to partnerships, technical writing roles, collaborations and Python-related training or roles.
  ðŸ“¢ You can also follow me on Twitter : â™¥ â™¥ Waiting for you! ðŸ™‚
 ",,https://blog.octachart.com/asynchronous-web-scraping-with-python-aiohttp,blog.octachart.com,"Hey there ðŸ‘‹, welcome here! Having looked at Asynchronous Web Scraping With Python GRequests, today we are using a different approach as I promised; We are using aiohttp Open that article in a new tab&hellip;",671,ltr,1,1
Automating Excel with Python Video Overview - Mouse Vs Python,Not found,Masters,2019-05-21T16:21:43.081Z,https://miro.medium.com/max/640/0*n4Chf511o44yaoAv.jpg,"In this tutorial, I will show you an overview of using OpenPyXL and Python to read and write Excel documents. You will also learn how to:

Style cells
Change fonts
Create named styles
Use pandas with Excel
Combine pandas and OpenPyXL
Basics of using XslxWriter

The code in this tutorial is based on code from my book, Automating Excel with Python:

Gumroad (eBook)
Leanpub (eBook)
Amazon (paperback)


",,https://www.blog.pythonlibrary.org/2022/03/29/automating-excel-with-python-video-overview/,www.blog.pythonlibrary.org,"In this tutorial, I will show you an overview of using OpenPyXL and Python to read and write Excel documents. You will also learn how to: Style cells",67,ltr,1,1
